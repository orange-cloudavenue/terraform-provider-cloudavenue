{
	"Base terraform resource/datasource": {
		"scope": "go",
		"prefix": "tf-templates",
		"body": [
			"// tfname: ${TM_DIRECTORY/^.+\\/(.*)$/$1/}_${TM_FILENAME/(.*)(_resource|_datasource)\\.go/$1/}",
			"// ? ---------------------------------------------------------------------------------------------------------------------- ? //",
			"// * Description",
			"// terraform-templates create template for terraform resource or data source",
			"// Some files has been created by terraform-templates",
			"// - internal/provider/${TM_DIRECTORY/^.+\\/(.*)$/$1/}/${TM_FILENAME/(.*)(_resource|_datasource)\\.go/$1/}_types.go",
			"// - internal/provider/${TM_DIRECTORY/^.+\\/(.*)$/$1/}/${TM_FILENAME/(.*)(_resource|_datasource)\\.go/$1/}_schema.go",
			"// - internal/provider/${TM_DIRECTORY/^.+\\/(.*)$/$1/}/${TM_FILENAME/(.*)(_resource|_datasource)\\.go/$1/}_schema_test.go",
			"// - internal/testsacc/${TM_DIRECTORY/^.+\\/(.*)$/$1/}_${TM_FILENAME/(.*)\\.go/$1/}_test.go",
			"// * How to use",
			"// ! Usage: $> terraform-templates -filename $RELATIVE_FILEPATH",
			"// ? ---------------------------------------------------------------------------------------------------------------------- ? //",
			"package ${TM_DIRECTORY/^.+\\/(.*)$/$1/}"
		],
		"description": "Boilerplate for resource or data source terraform provider"
	},
	"Go Generate Import example": {
		"scope": "go",
		"prefix": "tf-generate-example-import",
		"body": [
			"//go:generate go run github.com/FrangipaneTeam/tf-doc-extractor@latest -filename \\$GOFILE -example-dir ../../../examples -resource"
		],
		"description": "Boilerplate for resource or data source terraform provider"
	},
	"Go Generate Resource example": {
		"scope": "go",
		"prefix": "tf-generate-example-resource",
		"body": [
			"//go:generate go run github.com/FrangipaneTeam/tf-doc-extractor@latest -filename \\$GOFILE -example-dir ../../examples -test"
		],
		"description": "Boilerplate for resource or data source terraform provider"
	},
	"SuperSchema Base": {
		"scope": "go",
		"prefix": "tf-super-schema-base",
		"body": [
			"return superschema.Schema{",
			"Resource: superschema.SchemaDetails{",
			"MarkdownDescription: \"The security_tag resource allows you to assign security tags to VMs.\",",
			"},",
			"Attributes: map[string]superschema.Attribute{",
			"\"id\": superschema.StringAttribute{",
			"Resource: &schemaR.StringAttribute{",
			"Required:            true,",
			"MarkdownDescription: \"ID is the name of the security tag.\",",
			"Validators: []validator.String{",
			"stringvalidator.LengthBetween(1, 129),",
			"},",
			"PlanModifiers: []planmodifier.String{",
			"stringplanmodifier.RequiresReplace(),",
			"},",
			"},",
			"},",
			"},",
			"}",
		],
	}
}