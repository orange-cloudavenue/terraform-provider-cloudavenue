package vm

import (
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"

	"github.com/orange-cloudavenue/terraform-provider-cloudavenue/internal/helpers/boolpm"
	"github.com/orange-cloudavenue/terraform-provider-cloudavenue/internal/helpers/stringpm"
)

type Network struct {
	Type             types.String `tfsdk:"type"`
	IPAllocationMode types.String `tfsdk:"ip_allocation_mode"`
	Name             types.String `tfsdk:"name"`
	IP               types.String `tfsdk:"ip"`
	IsPrimary        types.Bool   `tfsdk:"is_primary"`
	Mac              types.String `tfsdk:"mac"`
	AdapterType      types.String `tfsdk:"adapter_type"`
	Connected        types.Bool   `tfsdk:"connected"`
}

// NetworkSchema returns the schema for the network
func NetworkSchema() map[string]schema.Attribute {
	return map[string]schema.Attribute{
		"type": schema.StringAttribute{
			MarkdownDescription: "Network type to use: `vapp`, `org` or `none`. Use `vapp` for vApp network, `org` to attach Org VDC network. `none` for empty NIC.",
			Required:            true,
			// TODO : Add validator
		},
		"ip_allocation_mode": schema.StringAttribute{
			MarkdownDescription: "IP allocation mode: `DHCP`, `POOL`, `MANUAL` or `NONE`. ",
			Optional:            true,
			Validators: []validator.String{
				stringvalidator.OneOf("DHCP", "POOL", "MANUAL", "NONE"),
			},
			PlanModifiers: []planmodifier.String{
				stringpm.SetDefaultEmptyString(),
			},
		},
		"name": schema.StringAttribute{
			MarkdownDescription: "Name of the network this VM should connect to. Always required except for `type` `NONE`.",
			Optional:            true,
			PlanModifiers: []planmodifier.String{
				stringpm.SetDefault("none"),
			},
			// Not force new because it can be changed in-place
			// TODO : Add validator
		},
		"ip": schema.StringAttribute{
			MarkdownDescription: "IP of the VM. Settings depend on `ip_allocation_mode`. Omitted or empty for DHCP, POOL, NONE. Required for MANUAL",
			Optional:            true,
			Computed:            true,
			// TODO : Add validator
		},
		"is_primary": schema.BoolAttribute{
			MarkdownDescription: "Set to true if network interface should be primary. First network card in the list will be primary by default",
			Optional:            true,
			Computed:            true,
			PlanModifiers: []planmodifier.Bool{
				boolpm.SetDefault(false),
			},
		},
		"mac": schema.StringAttribute{
			MarkdownDescription: "MAC address of the VM. Optional and autogenerated by default.",
			Optional:            true,
			Computed:            true,
			// TODO : Add validator
		},
		"adapter_type": schema.StringAttribute{
			MarkdownDescription: "The type of vNic to create on this interface. One of: `VMXNET3`, `E1000`, `E1000E`, `PCNet32`, `SRIOVETHERNETCARD`.",
			Optional:            true,
			Computed:            true,
			Validators: []validator.String{
				stringvalidator.OneOf("VMXNET3", "E1000", "E1000E", "PCNet32", "SRIOVETHERNETCARD"),
			},
		},
		"connected": schema.BoolAttribute{
			MarkdownDescription: "Set to true if network should be connected or false otherwise. Default is `true`.",
			Optional:            true,
			Computed:            true,
			PlanModifiers: []planmodifier.Bool{
				boolpm.SetDefault(true),
			},
		},
	}
}
