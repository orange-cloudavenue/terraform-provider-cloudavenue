name: TagRelease

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag version number (Eg: v0.1.0)'
        required: true
        type: string

permissions:
  contents: write

jobs:
  # * Step 0: Pre-Check
  pre-check:
    runs-on: ubuntu-latest
    outputs:
      TAG_NAME: ${{ steps.set-tag.outputs.TAG_NAME }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.CHANGELOG_PAT }}
      - name: Check if tag is valid
        run : |
          # Check if the tag start with 'v', if not, add it
          if [[ ! ${{ github.event.inputs.tag }} =~ ^v.* ]]; then
            echo "Error tag format is invalid. The format is vx.x.x" >> "$GITHUB_OUTPUT"
            exit 1
          fi
      - name: Construct Tag for Pre-Release
        id: set-tag
        run: |
          # Construct the tag name
          echo "TAG_NAME=${{ github.event.inputs.tag }}" >> "$GITHUB_OUTPUT"
  # * Step 1: Check if everything is ok
  tag-already-exist:
    needs: [pre-check]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.CHANGELOG_PAT }}
      - name: Check if tag not already exists
        run: |
          if git rev-parse ${{ needs.pre-check.outputs.TAG_NAME }} >/dev/null 2>&1; then
            echo "Tag ${{ needs.pre-check.outputs.TAG_NAME }} already exists" >> "$GITHUB_OUTPUT"
            exit 1
          fi
  golangci-lint:
    needs: [pre-check]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.CHANGELOG_PAT }}
          ref: ${{ github.ref }}
      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      - run: go mod download
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
  testsunit:
    needs: [pre-check]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.CHANGELOG_PAT }}
        ref: ${{ github.ref }}
    - uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
    - run: go mod download
    - name: Run Go unit tests
      env:
        TEST_CLOUDAVENUE_ORG: ${{ secrets.CLOUDAVENUE_ORG }}
        TEST_CLOUDAVENUE_USERNAME: ${{ secrets.CLOUDAVENUE_USER }}
        TEST_CLOUDAVENUE_PASSWORD: ${{ secrets.CLOUDAVENUE_PASSWORD }}
        TEST_CLOUDAVENUE_VDC: ${{ secrets.CLOUDAVENUE_VDC }}
      run: |
        go test $(go list ./... | grep -v /internal/testsacc/)

  # * Step 2: Create a new tag
  tag:
    needs: [golangci-lint, pre-check, tag-already-exist, testsunit]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.CHANGELOG_PAT }}
      - uses: rickstaa/action-create-tag@v1
        id: "tag_create"
        with:
          tag: ${{ needs.pre-check.outputs.TAG_NAME }}
          tag_exists_error: true
          message: "Release ${{ needs.pre-check.outputs.TAG_NAME }}"
  
  release-notes:
    runs-on: ubuntu-latest
    needs: [tag, pre-check]
    steps:
      - uses: actions/checkout@v4 # v3.5.3 
        with:
          fetch-depth: 0
          ref: ${{ needs.pre-check.outputs.TAG_NAME }}
      - name: Generate Release Notes
        run: |
          echo "" > release-notes.txt
          export PREV_TAG=$(git tag --list 'v*' --sort=-version:refname | grep -E "v[0-9]+\.[0-9]+\.[0-9]+$" | head -n 2 | tail -n 1)
          export PREV_VERSION=${PREV_TAG//v}
          sed -n -e "1{/# /d;}" -e "2{/^$/d;}" -e "/# $PREV_VERSION/q;p" CHANGELOG.md >> release-notes.txt
      - uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: release-notes.txt
          retention-days: 1
  release-app:
    runs-on: ubuntu-latest
    needs: [release-notes, pre-check]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref:  ${{ needs.pre-check.outputs.TAG_NAME }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@01dd5d3ca463c7f10f7f4f7b4f177225ac661ee4 # v6.1.0
        id: import_gpg
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
      - id: release-notes-download
        name: Release Notes Download
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: release-notes
          path: /tmp
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5.1.0
        if: success()
        with:
          distribution: goreleaser
          version: latest
          args: release --clean -f .goreleaser.yml --release-notes=${{ steps.release-notes-download.outputs.download-path }}/release-notes.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
          METRICS_TARGET: ${{ secrets.METRICS_TARGET }}
          METRICS_TOKEN: ${{ secrets.METRICS_TOKEN }}
  changelog-newversion:
    needs: [release-app, pre-check]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4 # v3.5.3 
        with:
          token: ${{ secrets.CHANGELOG_PAT }}
          fetch-depth: 0
          ref: main
      - name: Update Changelog Header
        run: |
          CHANGELOG_FILE_NAME="CHANGELOG.md"
          RELEASE_TAG=${{ needs.pre-check.outputs.TAG_NAME }}
          # PREVIOUS_RELEASE_TAG=${{ github.ref_name }}

          # Add Release Date
          RELEASE_DATE=`date +%B' '%e', '%Y`
          sed -i -e "1 s/.*Unreleased.*/## ${RELEASE_TAG#v} ($RELEASE_DATE)/" $CHANGELOG_FILE_NAME

          # Prepend next release line
          echo Release is: $RELEASE_TAG

          NEW_RELEASE_LINE=$(echo $RELEASE_TAG | awk -F. '{
              $1 = substr($1,2)
              $2 += 1
              printf("%s.%01d.0\n\n", $1, $2);
          }')

          echo New minor version is: v$NEW_RELEASE_LINE

          echo -e "## $NEW_RELEASE_LINE (Unreleased)\n$(cat $CHANGELOG_FILE_NAME)" > $CHANGELOG_FILE_NAME
      - uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: Update CHANGELOG.md after ${{ github.ref_name }}"
          commit_options: '--no-verify --signoff'
          file_pattern: CHANGELOG.md
          commit_user_name: github-actions[bot]
          commit_user_email: github-actions[bot]@users.noreply.github.com
          commit_author: github-actions[bot] <github-actions[bot]@users.noreply.github.com>

